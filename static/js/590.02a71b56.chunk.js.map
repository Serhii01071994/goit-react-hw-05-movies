{"version":3,"file":"static/js/590.02a71b56.chunk.js","mappings":"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","sources":["components/ErrorMessege/ErrorMessage.jsx","components/MovieDetailsCard/MovieDetailsCard.jsx","pages/Cast.jsx","pages/Reviews.jsx","components/AdditionalInformation/AdditionalInformation.jsx","pages/MovieDetails.jsx","servises/api.js"],"sourcesContent":["import React from 'react';\n\nconst ErrorMessage = ({ message }) => {\n  return <p className=\"error\">{message}</p>;\n};\n\nexport default ErrorMessage;\n","import { filmposter } from 'servises/api';\n\nexport const MovieDetailsCard = ({ moviesDetails }) => {\n  return (\n    <div className=\"movie-deteils\">\n      <div className=\"poster\">\n        <img\n          src={filmposter(moviesDetails?.poster_path)}\n          alt={moviesDetails?.original_title}\n          width={300}\n        />\n      </div>\n      <div className=\"details\">\n        <h1 className=\"title\">\n          {moviesDetails?.original_title} (\n          {moviesDetails?.release_date.slice(0, 4)})\n        </h1>\n        <p className=\"text\">\n          User score: {Math.round(moviesDetails?.vote_average * 10)}%\n        </p>\n        <h2 className=\"under-title\">Overview</h2>\n        <p className=\"text\">{moviesDetails?.overview}</p>\n        <h2 className=\"under-title\">Genres</h2>\n        <p className=\"text\">\n          {moviesDetails?.genres.map(genre => (\n            <span key={genre.id}>{genre.name} </span>\n          ))}\n        </p>\n      </div>\n    </div>\n  );\n};\n","import ErrorMessage from 'components/ErrorMessege/ErrorMessage';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast, filmposter } from 'servises/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [currentCast, setCurrentCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        setIsLoading(true);\n        const moviesCast = await fetchMovieCast(movieId);\n        setCurrentCast(moviesCast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  if (currentCast?.length === 0) {\n    return <p>No info</p>;\n  }\n\n  return (\n    <div className=\"actor-card\">\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {currentCast &&\n        currentCast.map(actor => (\n          <div className=\"actor\" key={actor.id}>\n            <img\n              src={filmposter(actor.profile_path)}\n              alt={actor.original_name}\n              width={150}\n            />\n            <p className=\"under-title\">{actor.original_name}</p>\n            <p className=\"text\">Character: {actor.character}</p>\n          </div>\n        ))}\n    </div>\n  );\n};\nexport default Cast;\n","import ErrorMessage from 'components/ErrorMessege/ErrorMessage';\nimport Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'servises/api';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [currentReviews, setCurrentReviews] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  \n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setIsLoading(true);\n        const moviesReviews = await fetchMovieReviews(movieId);\n        setCurrentReviews(moviesReviews);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  if (currentReviews?.length === 0) {\n    return <p>No info</p>;\n  }\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error} />}\n      {currentReviews &&\n        currentReviews.map(authors => (\n          <div key={authors.author}>\n            <h2 className=\"under-title\">{authors.author}</h2>\n            <p className=\"text\">{authors.content}</p>\n          </div>\n        ))}\n    </div>\n  );\n};\nexport default Reviews;\n","import { StyledLinkInform } from \"components/App/App.styled\";\nimport { Link } from \"react-router-dom\"\n\nexport const AdditionalInformation = ({ location }) => {\n  \n    return (\n      <StyledLinkInform>\n        <div className=\"inform\">\n          <Link\n            to={'cast'}\n            state={{ from: location.state?.from ?? '/' }}\n            className=\"go-back\"\n          >\n            Cast\n          </Link>\n          <Link\n            to={'reviews'}\n            state={{ from: location.state?.from ?? '/' }}\n            className=\"go-back\"\n          >\n            Reviews\n          </Link>\n        </div>\n      </StyledLinkInform>\n    );\n}","import ErrorMessage from 'components/ErrorMessege/ErrorMessage';\nimport Loader from 'components/Loader/Loader';\nimport { MovieDetailsCard } from 'components/MovieDetailsCard/MovieDetailsCard';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link, Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetails } from 'servises/api';\nimport Cast from './Cast';\nimport Reviews from './Reviews';\nimport { AdditionalInformation } from 'components/AdditionalInformation/AdditionalInformation';\nimport { StyledLink } from 'components/App/App.styled';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n  const [moviesDetails, setMoviesDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovieDetailsById = async () => {\n      try {\n        setIsLoading(true);\n        const moviesData = await fetchMovieDetails(movieId);\n        setMoviesDetails(moviesData);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieDetailsById();\n  }, [movieId]);\n\n  return (\n    <StyledLink>\n      <div className=\"container\">\n        {isLoading && <Loader />}\n        {error && <ErrorMessage message={error} />}\n        <Link to={backLinkHref.current} className=\"go-back\">\n          Go Back\n        </Link>\n        <MovieDetailsCard moviesDetails={moviesDetails} />\n        <AdditionalInformation location={location} />\n        <Routes>\n          <Route path=\"cast\" element={<Cast />} />\n          <Route path=\"reviews\" element={<Reviews />} />\n        </Routes>\n      </div>\n    </StyledLink>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = '02cdb7a51a2e3d1e8057374db8e49782';\nconst URL = 'https://api.themoviedb.org/3';\nconst default_poster =\n  'https://shop-cdn1-2.vigbo.tech/shops/126035//products/21752720/images/2-e62e01f93c697739149c01b31defa96b.jpg?version=undefined';\n\n// Запрос популярных фильмов\nexport const fetchAllMovies = async () => {\n  const { data } = await axios.get(\n    `${URL}/trending/movie/week?api_key=${API_KEY}`\n  );\n  return data.results;\n};\n\n// Поиск фильмов по названию\nexport const fetchSearchMovies = async query => {\n  const { data } = await axios.get(\n    `${URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return data;\n};\n\n// Детали фильма\nexport const fetchMovieDetails = async movieId => {\n  const { data } = await axios.get(\n    `${URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  return data;\n};\n\n// Актерский состав\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return data.cast;\n};\n\n// Обзоры фильма\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return data.results;\n};\n\n// Постер фильма\nexport const filmposter = poster_path =>\n  poster_path\n    ? `https://image.tmdb.org/t/p/w300/${poster_path}`\n    : default_poster;\n"],"names":["message","className","MovieDetailsCard","moviesDetails","src","filmposter","poster_path","alt","original_title","width","release_date","slice","Math","round","vote_average","overview","genres","map","genre","name","id","movieId","useParams","useState","currentCast","setCurrentCast","isLoading","setIsLoading","error","setError","useEffect","fetchCast","fetchMovieCast","moviesCast","length","Loader","ErrorMessage","actor","profile_path","original_name","character","currentReviews","setCurrentReviews","fetchReviews","fetchMovieReviews","moviesReviews","authors","author","content","AdditionalInformation","location","to","state","from","useLocation","backLinkHref","useRef","setMoviesDetails","fetchMovieDetailsById","fetchMovieDetails","moviesData","current","path","element","API_KEY","URL","fetchAllMovies","axios","data","results","fetchSearchMovies","query","cast"],"sourceRoot":""}